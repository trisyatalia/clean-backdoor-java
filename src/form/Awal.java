/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import java.util.concurrent.TimeUnit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Trisy
 */
public class Awal extends javax.swing.JFrame {

    /**
     * Creates new form Awal
     */
    public Awal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tombol_scan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tombol_delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("SCAN BACKDOOR");

        tombol_scan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tombol_scan.setText("CLICK TO START SCAN");
        tombol_scan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombol_scanActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process Name", "Process ID", "Registry Name", "Registry Value", "File to Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        tombol_delete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tombol_delete.setText("DELETE FILES");
        tombol_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombol_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(343, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(352, 352, 352))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tombol_scan, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(291, 291, 291))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tombol_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(389, 389, 389))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(tombol_scan, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tombol_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tombol_scanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombol_scanActionPerformed
        try {
            
            changeVariable2();
             if (regs==false){
              res="";
              res2="";
              reg_res="";
              reg_res2="";
              reg_res3="";
              res_file="";
              res2_file="";
              
                //javax.swing.JOptionPane.showMessageDialog(null, "backdoor not found");   
            }
           
            else {
                  tulisKeTxt();
                  tulisKeTable();
           
                while ((file==true) || (regs==true)) {
                        int YesorNo = JOptionPane.showConfirmDialog(null, "Backdoor found, do you want to clean it?", "Delete", JOptionPane.YES_NO_OPTION);
                        if (YesorNo==0) {
                            DeleteThings();
                               javax.swing.JOptionPane.showMessageDialog(null, "backdoor deleted");     
                        }
                        else {
                           javax.swing.JOptionPane.showMessageDialog(null, "backdoor not deleted");
                        }
                         
                    }
            
            }
            
            changeVariable();
            if (regs==false){
              res="";
              res2="";
              reg_res="";
              reg_res2="";
              reg_res3="";
              res_file="";
              res2_file="";
              
                javax.swing.JOptionPane.showMessageDialog(null, "backdoor not found");   
            }
            else {
                
            tulisKeTxt();
            tulisKeTable();
            
            while ((proc==true) || (regs==true)) {
                        int YesorNo = JOptionPane.showConfirmDialog(null, "Backdoor found, do you want to clean it?", "Delete", JOptionPane.YES_NO_OPTION);
                        if (YesorNo==0) {
                            DeleteThings();
                         javax.swing.JOptionPane.showMessageDialog(null, "click 'delete files' to delete backdoor");     
                        }
                        else {
                            javax.swing.JOptionPane.showMessageDialog(null, "backdoor not deleted");
                        } 
                    }
            }
            
                    
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(Awal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            
        
        
    }//GEN-LAST:event_tombol_scanActionPerformed

    private void tombol_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombol_deleteActionPerformed
        try {
            DeleteThings();
            javax.swing.JOptionPane.showMessageDialog(null, "backdoor deleted");
        } catch (IOException ex) {
            Logger.getLogger(Awal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tombol_deleteActionPerformed

    /**
     * @param args the command line arguments
     */ 
      
      String currentUsersHomeDir = System.getProperty("user.home");
      String dir=currentUsersHomeDir.substring(currentUsersHomeDir.indexOf("\\U"), currentUsersHomeDir.length());
      String res="";
      String res2="";
      String reg_res="";
      String reg_res2="";
      String reg_res3="";
      String res_file="";
      String res2_file="";
      String input_nama_reg="COM";
      String input_nama_proc="N/A";
      String input_nama_file="Directory of c:" + dir + "\\AppData\\Local\\Microsoft\\Windows";
      String input_nama_reg2="Update";
      String input_nama_proc2="N/A";
      String input_nama_file2="Directory of c:\\Windows";
      boolean proc=false;
      boolean regs=false;
      boolean file=false;
      //String[] aa = {"a","b"};
      
      
      
      
      
      
      
      public void changeVariable2() throws IOException, InterruptedException{
          
                res="tnnbtib.exe";
              Process ab= Runtime.getRuntime().exec("cmd /c taskkill /IM \"tnnbtib.exe\" /F");
              Process bb= Runtime.getRuntime().exec("cmd /c reg query hkey_local_machine\\software\\wow6432node\\microsoft\\windows\\currentversion\\run  > regs.txt");
              Process cb= Runtime.getRuntime().exec("cmd /c dir /S -a \"c:\\tnnbtib.exe\" > files.txt");
              
              //compareProcess();
              compareRegistry();
              compareFiles();
                  
              
      
      
      }
      
      
      public void changeVariable() throws IOException, InterruptedException{
          //String combox = jComboBox1.getSelectedItem().toString();
          
                
              Process a= Runtime.getRuntime().exec("cmd /c tasklist /svc | find \"svchost.exe\" > proc.txt");
              Process b= Runtime.getRuntime().exec("cmd /c reg query hkey_current_user\\software\\microsoft\\windows\\currentversion\\run > regs.txt");
              Process c= Runtime.getRuntime().exec("cmd /c dir /S /A \"c:\\svchost.exe\" > files.txt");
              
              compareProcess();
              compareRegistry();
              compareFiles();
                  
              
      }
      
      public void compareRegistry() throws FileNotFoundException, IOException, InterruptedException{
      //changeVariable();
      Thread.sleep(60000);
      File reg=new File("regs.txt"); //Creation of File Descriptor for input file
      String[] words=null;  //Intialize the word Array
      FileReader fr2 = new FileReader(reg);  //Creation of File Reader object
      BufferedReader br = new BufferedReader(fr2); //Creation of BufferedReader object
      String s;     
      String reg_rep="";
      //String reg_rep2="";
      
      int count=0;   //Intialize the word to zero
      while((s=br.readLine())!=null)   //Reading Content from the file
      {

         reg_rep = s.replaceAll("\\s{2,}", " ").trim();
         words=s.split(" ");  //Split the word using space
          for (String word : words)
          {
                 if ((word.equals(input_nama_reg)) || (word.equals(input_nama_reg2)))   //Search for the given word
                 {
                     count++;    //If Present increase the count by one
                     reg_res = reg_rep.split(" ")[0];              
                     reg_res2 = reg_rep.substring(reg_rep.indexOf("C:"), reg_rep.length());
                     
                     
                 }
          }
      }
      if(count!=0)  //Check for count not equal to zero
      {
            
            regs=true;
           
   
      }
      else {
         regs=false;
         //javax.swing.JOptionPane.showMessageDialog(null, "Registry not Found");
      }
            
        fr2.close();
      }
    
    public void compareProcess() throws FileNotFoundException, IOException, InterruptedException{
      //changeVariable();
      Thread.sleep(60000);
      String s;
      String rep="";
      String filePath = "proc.txt";
      File f1=new File(filePath); //Creation of File Descriptor for input file
      String[] words=null;  //Intialize the word Array
      FileReader fr = new FileReader(f1);  //Creation of File Reader object
      BufferedReader br = new BufferedReader(fr); //Creation of BufferedReader object
      int count=0;   //Intialize the word to zero
      while((s=br.readLine())!= null)   //Reading Content from the file
      {

         rep = s.replaceAll("\\s{2,}", " ").trim();
         words=s.split(" ");  //Split the word using space
          for (String word : words)
          {
              if ((word.equals(input_nama_proc)) || (word.equals(input_nama_proc2))){
                  
                  count++;
                  res=rep.split(" ")[0];
                  res2=rep.split(" ")[1];
              }
          }
      }
      if(count!=0)  //Check for count not equal to zero
      {
          
          proc=true;
      
          
      }
      
      else{ proc=false; }
        
    }
    
    public void compareFiles() throws IOException, InterruptedException {
      //changeVariable();
      Thread.sleep(60000);
      String s;
      String rep="";
      String filePath = "files.txt";
      File f1=new File(filePath); //Creation of File Descriptor for input file
      String[] words=null;  //Intialize the word Array
      FileReader fr = new FileReader(f1);  //Creation of File Reader object
      BufferedReader br = new BufferedReader(fr); //Creation of BufferedReader object
      int count=0;   //Intialize the word to zero
      while((s=br.readLine())!=null)   //Reading Content from the file
      {
         rep = s.replaceAll("\\s{2,}", " ").trim();
         System.out.println(rep);
         words=rep.split("\n");  //Split the word using space
          for (String word : words)
          {
              if ((word.equals(input_nama_file)) || (word.equals(input_nama_file2))){
                  count++;
                  res_file=word.substring(word.indexOf("c:"), word.length());
                  //res_file=word.split(" ")[2];
        
                  
                  
              }
          }
      }
      if(count > 0)  //Check for count not equal to zero
      {
          file=true;
          
      }
      else
      {
         file=false;
         //javax.swing.JOptionPane.showMessageDialog(null, "File not Found");
      }
      
         fr.close();
    }
    
  
    
  public void tulisKeTxt()throws IOException {
  
 
    FileWriter fw = new FileWriter("test.txt", true);
        try (BufferedWriter bw = new BufferedWriter(fw)) {
            
                bw.newLine();
                bw.write(res + "," + res2 + "," + reg_res + "," + reg_res2 + "," + res_file + "\\" + res2_file);
                bw.newLine();
        }
    
    }
  
  public void tulisKeTable() throws FileNotFoundException, IOException{
      String filemalware = "test.txt";
          File malware = new File(filemalware);
          
          BufferedReader rmal = new BufferedReader(new FileReader(malware));
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            
            // get lines from txt file
            String[] a = {res + "," + res2 + "," + reg_res + "," + reg_res2 + "," + res_file + "\\" + res2_file};
            
            // extratct data from lines
            // set data to jtable model
            for(int i = 0; i < a.length; i++)
            {
                String line = a[i].trim();
                String[] dataRow = line.split(",");
                model.addRow(dataRow);
            }
            
  }
  
  
  public void DeleteThings() throws IOException{
      
      
              Process aa= Runtime.getRuntime().exec("cmd /c taskkill /PID " + res2 + " /F");
              Process ba= Runtime.getRuntime().exec("cmd /c reg delete hkey_current_user\\software\\microsoft\\windows\\currentversion\\run /v \"COM Service\" /f");
              Process ca= Runtime.getRuntime().exec("cmd /c DEL /F /S /Q /A \"" + currentUsersHomeDir + "\\AppData\\Local\\Microsoft\\Windows\\msrbie.com\"");
              Process da= Runtime.getRuntime().exec("cmd /c DEL /F /S /Q /A \"" + currentUsersHomeDir + "\\AppData\\Local\\Microsoft\\Windows\\svchost.exe\"" );
              
              //Process ab= Runtime.getRuntime().exec("cmd /c taskkill /IM \"tnnbtib.exe\" /F");
              Process bb= Runtime.getRuntime().exec("cmd /c reg delete hkey_local_machine\\software\\wow6432node\\microsoft\\windows\\currentversion\\run /v \"Update\" /f");
              Process cb= Runtime.getRuntime().exec("cmd /c del c:\\Windows\\tnnbtib.exe");
             
              
      currentUsersHomeDir = System.getProperty("user.home");
      dir=currentUsersHomeDir.substring(currentUsersHomeDir.indexOf("\\U"), currentUsersHomeDir.length());
      res="";
      res2="";
      reg_res="";
      reg_res2="";
      reg_res3="";
      res_file="";
      res2_file="";
      input_nama_reg="COM";
      input_nama_proc="N/A";
      input_nama_file="Directory of c:" + dir + "\\AppData\\Local\\Microsoft\\Windows";
      input_nama_reg2="Update";
      input_nama_proc2="N/A";
      input_nama_file2="Directory of c:\\Windows";
      proc=false;
      regs=false;
      file=false;
         
      }
  
  

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton tombol_delete;
    private javax.swing.JButton tombol_scan;
    // End of variables declaration//GEN-END:variables
}
